{"id":"core\/lock\/semaphorelock","type":"","title":"Google\\Cloud\\Core\\Lock\\SemaphoreLock","name":"SemaphoreLock","description":"<p>Semaphore based lock implementation.<\/p>","examples":[],"resources":[{"title":"","link":"http:\/\/php.net\/manual\/en\/book.sem.php"}],"methods":[{"id":"__construct","type":"constructor","name":"__construct","source":"Core\/src\/Lock\/SemaphoreLock.php#L51","description":"","examples":[],"resources":[],"params":[{"name":"key","description":"<p>A key.<\/p>","types":["<a href=\"http:\/\/php.net\/manual\/en\/language.types.integer.php\" target=\"_blank\">int<\/a>"],"optional":false,"nullable":null}],"exceptions":[{"type":"\\InvalidArgumentException","description":"If an invalid key is provided."},{"type":"\\RuntimeException","description":"If the System V IPC extensions are missing."}],"returns":[]},{"id":"acquire","type":"instance","name":"acquire","source":"Core\/src\/Lock\/SemaphoreLock.php#L76","description":"<p>Acquires a lock that will block until released.<\/p>","examples":[],"resources":[],"params":[{"name":"options","description":"<p>Configuration options.<\/p>","types":["<a href=\"http:\/\/php.net\/manual\/en\/language.types.array.php\" target=\"_blank\">array<\/a>"],"optional":true,"nullable":null},{"name":"options.blocking","description":"<p>Whether the process should block while waiting to acquire the lock. <strong>Defaults to<\/strong> true.<\/p>","types":["<a href=\"http:\/\/php.net\/manual\/en\/language.types.boolean.php\" target=\"_blank\">bool<\/a>"],"optional":null,"nullable":null}],"exceptions":[{"type":"\\RuntimeException","description":"If the lock fails to be acquired."}],"returns":[{"types":["<a href=\"http:\/\/php.net\/manual\/en\/language.types.boolean.php\" target=\"_blank\">bool<\/a>"],"description":""}]},{"id":"release","type":"instance","name":"release","source":"Core\/src\/Lock\/SemaphoreLock.php#L102","description":"<p>Releases the lock.<\/p>","examples":[],"resources":[],"params":[],"exceptions":[{"type":"\\RuntimeException","description":"If the lock fails to release."}],"returns":[]},{"id":"synchronize","type":"instance","name":"synchronize","source":"Core\/src\/Lock\/LockTrait.php#L60","description":"<p>Execute a callable within a lock. If an exception is caught during\nexecution of the callable the lock will first be released before throwing\nit.<\/p>\n\nImplemented in <a data-custom-type=\"core\/lock\/locktrait\">Google\\Cloud\\Core\\Lock\\LockTrait<\/a>","examples":[],"resources":[],"params":[{"name":"func","description":"<p>The callable to execute.<\/p>","types":["<a href=\"http:\/\/php.net\/manual\/en\/language.types.callable.php\" target=\"_blank\">callable<\/a>"],"optional":false,"nullable":null},{"name":"options","description":"<p>Configuration options.<\/p>","types":["<a href=\"http:\/\/php.net\/manual\/en\/language.types.array.php\" target=\"_blank\">array<\/a>"],"optional":true,"nullable":null},{"name":"options.blocking","description":"<p>Whether the process should block while waiting to acquire the lock. <strong>Defaults to<\/strong> true.<\/p>","types":["<a href=\"http:\/\/php.net\/manual\/en\/language.types.boolean.php\" target=\"_blank\">bool<\/a>"],"optional":null,"nullable":null}],"exceptions":[],"returns":[{"types":["<a href=\"http:\/\/php.net\/manual\/en\/language.pseudo-types.php#language.types.mixed\" target=\"_blank\">mixed<\/a>"],"description":""}]}]}