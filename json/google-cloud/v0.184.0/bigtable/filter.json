{"id":"bigtable\/filter","type":"","title":"Google\\Cloud\\Bigtable\\Filter","name":"Filter","description":"<p>This class houses static factory methods which can be used to create a\nhierarchy of filters for use with\n<a data-custom-type=\"bigtable\/table\" data-method=\"checkAndMutateRow\">Google\\Cloud\\Bigtable\\Table::checkAndMutateRow()<\/a> or\n<a data-custom-type=\"bigtable\/table\" data-method=\"readRows\">Google\\Cloud\\Bigtable\\Table::readRows()<\/a>.<\/p>\n<p>Filters are used to take an input row and produce an alternate view of the\nrow based on the specified rules. For example, a filter might trim down a row\nto include just the cells from columns matching a given regular expression,\nor might return all the cells of a row but not their values. More complicated\nfilters can be composed out of these components to express requests such as,\n&quot;within every column of a particular family, give just the two most recent\ncells which are older than timestamp X.&quot;<\/p>\n<p>There are two broad categories of filters (true filters and transformers),\nas well as two ways to compose simple filters into more complex ones\n(chains and interleaves). They work as follows:<\/p>\n<p>True filters alter the input row by excluding some of its cells wholesale\nfrom the output row. An example of a true filter is\n<a data-custom-type=\"bigtable\/filter\/builder\/valuefilter\" data-method=\"regex\">Google\\Cloud\\Bigtable\\Filter\\Builder\\ValueFilter::regex()<\/a>, which excludes\ncells whose values don't match the specified pattern. All regex true filters\nuse <a href=\"https:\/\/github.com\/google\/re2\/wiki\/Syntax\">RE2 syntax<\/a> in raw byte mode\n(RE2::Latin1), and are evaluated as full matches. An important point to keep\nin mind is that <code>RE2(.)<\/code> is equivalent by default to <code>RE2([^\\n])<\/code>, meaning\nthat it does not match newlines.<\/p>\n<p>Transformers alter the input row by changing the values of some of its cells\nin the output, without excluding them completely. An example of such a\ntransformer is <a data-custom-type=\"bigtable\/filter\/builder\/valuefilter\" data-method=\"strip\">Google\\Cloud\\Bigtable\\Filter\\Builder\\ValueFilter::strip()<\/a>.<\/p>\n<p>The total serialized size of a filter message must not\nexceed 4096 bytes, and filters may not be nested within each other\n(in Chains or Interleaves) to a depth of more than 20.<\/p>","examples":[{"caption":"","code":"use Google\\Cloud\\Bigtable\\BigtableClient;\nuse Google\\Cloud\\Bigtable\\Filter;\n\n$bigtable = new BigtableClient();\n$table = $bigtable->table('my-instance', 'my-table');\n$rowFilter = Filter::chain()\n    ->addFilter(Filter::qualifier()->regex('prefix.*'))\n    ->addFilter(Filter::limit()->cellsPerRow(10));\n\n$rows = $table->readRows([\n    'filter' => $rowFilter\n]);\n\nforeach ($rows as $row) {\n    print_r($row) . PHP_EOL;\n}"}],"resources":[],"methods":[{"id":"chain","type":"instance","name":"chain","source":"Bigtable\/src\/Filter.php#L114","description":"<p>Creates an empty chain filter.<\/p>\n<p>Filters can be added to the chain by invoking\n<a data-custom-type=\"bigtable\/filter\/chainfilter\" data-method=\"addFilter\">Google\\Cloud\\Bigtable\\Filter\\ChainFilter::addFilter()<\/a>.<\/p>\n<p>The filters are applied in sequence, progressively narrowing the results.\nThe full chain is executed atomically.<\/p>\n<p>Conceptually, the process looks like the following:\n<code>in row -&gt; filter0 -&gt; intermediate row -&gt; filter1 -&gt; ... -&gt; filterN -&gt; out row<\/code>.<\/p>","examples":[{"caption":"","code":"use Google\\Cloud\\Bigtable\\Filter;\n\n$rowFilter = Filter::chain()\n    ->addFilter(Filter::qualifier()->regex('prefix.*'))\n    ->addFilter(Filter::limit()->cellsPerRow(10));"}],"resources":[],"params":[],"exceptions":[],"returns":[{"types":["<a data-custom-type=\"bigtable\/filter\/chainfilter\">Google\\Cloud\\Bigtable\\Filter\\ChainFilter<\/a>"],"description":""}]},{"id":"interleave","type":"instance","name":"interleave","source":"Bigtable\/src\/Filter.php#L163","description":"<p>Creates an empty interleave filter.<\/p>\n<p>Filters can be added to the interleave by invoking\n<a data-custom-type=\"bigtable\/filter\/interleavefilter\" data-method=\"addFilter\">Google\\Cloud\\Bigtable\\Filter\\InterleaveFilter::addFilter()<\/a>.<\/p>\n<p>The supplied filters all process a copy of the input row, and the\nresults are pooled, sorted, and combined into a single output row. If\nmultiple cells are produced with the same column and timestamp, they will\nall appear in the output row in an unspecified mutual order. The full\nchain is executed atomically.<\/p>\n<p>Consider the following example, with three filters:<\/p>\n<pre><code>                                 input row\n                                     |\n           -----------------------------------------------------\n           |                         |                         |\n        filter1                   filter2                   filter3\n           |                         |                         |\n    1: foo,bar,10,x             foo,bar,10,z              far,bar,7,a\n    2: foo,blah,11,z            far,blah,5,x              far,blah,5,x\n           |                         |                         |\n           -----------------------------------------------------\n                                     |\n    1:                      foo,bar,10,z   \/\/ could have switched with #2\n    2:                      foo,bar,10,x   \/\/ could have switched with #1\n    3:                      foo,blah,11,z\n    4:                      far,bar,7,a\n    5:                      far,blah,5,x   \/\/ identical to #6\n    6:                      far,blah,5,x   \/\/ identical to #5<\/code><\/pre>","examples":[{"caption":"","code":"use Google\\Cloud\\Bigtable\\Filter;\n\n$rowFilter = Filter::interleave()\n    ->addFilter(Filter::key()->regex('prefix.*'))\n    ->addFilter(Filter::sink());"}],"resources":[],"params":[],"exceptions":[],"returns":[{"types":["<a data-custom-type=\"bigtable\/filter\/interleavefilter\">Google\\Cloud\\Bigtable\\Filter\\InterleaveFilter<\/a>"],"description":""}]},{"id":"condition","type":"instance","name":"condition","source":"Bigtable\/src\/Filter.php#L198","description":"<p>Creates a condition filter.<\/p>\n<p>If the result of predicate filter outputs any cells the filter configured\nby <a data-custom-type=\"bigtable\/filter\/conditionfilter\" data-method=\"then\">Google\\Cloud\\Bigtable\\Filter\\ConditionFilter::then()<\/a> will be\napplied. Conversely, if the predicate results in no cells, the filter\nconfigured by\n<a data-custom-type=\"bigtable\/filter\/conditionfilter\" data-method=\"otherwise\">Google\\Cloud\\Bigtable\\Filter\\ConditionFilter::otherwise()<\/a> will\nthen be applied instead.<\/p>\n<p>IMPORTANT NOTE: The predicate filter does not execute atomically with the\n<a data-custom-type=\"bigtable\/filter\/conditionfilter\" data-method=\"then\">Google\\Cloud\\Bigtable\\Filter\\ConditionFilter::then()<\/a>\nand <a data-custom-type=\"bigtable\/filter\/conditionfilter\" data-method=\"otherwise\">Google\\Cloud\\Bigtable\\Filter\\ConditionFilter::otherwise()<\/a>\nfilters, which may lead to inconsistent or unexpected results.\nAdditionally, <a data-custom-type=\"bigtable\/filter\/conditionfilter\">Google\\Cloud\\Bigtable\\Filter\\ConditionFilter<\/a> may\nhave poor performance, especially when filters are set for the\n<a data-custom-type=\"bigtable\/filter\/conditionfilter\" data-method=\"otherwise\">Google\\Cloud\\Bigtable\\Filter\\ConditionFilter::otherwise()<\/a>.<\/p>","examples":[{"caption":"","code":"use Google\\Cloud\\Bigtable\\Filter;\n\n$rowFilter = Filter::condition(Filter::key()->regex('prefix.*'))\n    ->then(Filter::label('hasPrefix'))\n    ->otherwise(Filter::value()->strip());"}],"resources":[],"params":[{"name":"predicateFilter","description":"<p>A predicate filter.<\/p>","types":["<a data-custom-type=\"bigtable\/filter\/filterinterface\">Google\\Cloud\\Bigtable\\Filter\\FilterInterface<\/a>"],"optional":false,"nullable":null}],"exceptions":[],"returns":[{"types":["<a data-custom-type=\"bigtable\/filter\/conditionfilter\">Google\\Cloud\\Bigtable\\Filter\\ConditionFilter<\/a>"],"description":""}]},{"id":"key","type":"instance","name":"key","source":"Bigtable\/src\/Filter.php#L216","description":"<p>Returns a builder used to configure row key filters.<\/p>","examples":[{"caption":"","code":"use Google\\Cloud\\Bigtable\\Filter;\n\n$rowFilter = Filter::key()\n    ->regex('prefix.*');"}],"resources":[],"params":[],"exceptions":[],"returns":[{"types":["<a data-custom-type=\"bigtable\/filter\/builder\/keyfilter\">Google\\Cloud\\Bigtable\\Filter\\Builder\\KeyFilter<\/a>"],"description":""}]},{"id":"family","type":"instance","name":"family","source":"Bigtable\/src\/Filter.php#L234","description":"<p>Returns a builder used to configure column family filters.<\/p>","examples":[{"caption":"","code":"use Google\\Cloud\\Bigtable\\Filter;\n\n$rowFilter = Filter::family()\n    ->regex('prefix.*');"}],"resources":[],"params":[],"exceptions":[],"returns":[{"types":["<a data-custom-type=\"bigtable\/filter\/builder\/familyfilter\">Google\\Cloud\\Bigtable\\Filter\\Builder\\FamilyFilter<\/a>"],"description":""}]},{"id":"qualifier","type":"instance","name":"qualifier","source":"Bigtable\/src\/Filter.php#L252","description":"<p>Returns a builder used to configure column qualifier filters.<\/p>","examples":[{"caption":"","code":"use Google\\Cloud\\Bigtable\\Filter;\n\n$rowFilter = Filter::qualifier()\n    ->regex('prefix.*');"}],"resources":[],"params":[],"exceptions":[],"returns":[{"types":["<a data-custom-type=\"bigtable\/filter\/builder\/qualifierfilter\">Google\\Cloud\\Bigtable\\Filter\\Builder\\QualifierFilter<\/a>"],"description":""}]},{"id":"timestamp","type":"instance","name":"timestamp","source":"Bigtable\/src\/Filter.php#L271","description":"<p>Returns a builder used to configure timestamp related filters.<\/p>","examples":[{"caption":"","code":"use Google\\Cloud\\Bigtable\\Filter;\n\n$rowFilter = Filter::timestamp()\n    ->range()\n    ->of(1536766964380000, 1536766964383000);"}],"resources":[],"params":[],"exceptions":[],"returns":[{"types":["<a data-custom-type=\"bigtable\/filter\/builder\/timestampfilter\">Google\\Cloud\\Bigtable\\Filter\\Builder\\TimestampFilter<\/a>"],"description":""}]},{"id":"value","type":"instance","name":"value","source":"Bigtable\/src\/Filter.php#L290","description":"<p>Returns a builder used to configure value related filters.<\/p>","examples":[{"caption":"","code":"use Google\\Cloud\\Bigtable\\Filter;\n\n$rowFilter = Filter::value()\n    ->range()\n    ->of('a', 'z');"}],"resources":[],"params":[],"exceptions":[],"returns":[{"types":["<a data-custom-type=\"bigtable\/filter\/builder\/valuefilter\">Google\\Cloud\\Bigtable\\Filter\\Builder\\ValueFilter<\/a>"],"description":""}]},{"id":"offset","type":"instance","name":"offset","source":"Bigtable\/src\/Filter.php#L308","description":"<p>Returns a builder used to configure offset related filters.<\/p>","examples":[{"caption":"","code":"use Google\\Cloud\\Bigtable\\Filter;\n\n$rowFilter = Filter::offset()\n    ->cellsPerRow(1);"}],"resources":[],"params":[],"exceptions":[],"returns":[{"types":["<a data-custom-type=\"bigtable\/filter\/builder\/offsetfilter\">Google\\Cloud\\Bigtable\\Filter\\Builder\\OffsetFilter<\/a>"],"description":""}]},{"id":"limit","type":"instance","name":"limit","source":"Bigtable\/src\/Filter.php#L326","description":"<p>Returns a builder used to configure limit related filters.<\/p>","examples":[{"caption":"","code":"use Google\\Cloud\\Bigtable\\Filter;\n\n$rowFilter = Filter::limit()\n    ->cellsPerRow(1);"}],"resources":[],"params":[],"exceptions":[],"returns":[{"types":["<a data-custom-type=\"bigtable\/filter\/builder\/limitfilter\">Google\\Cloud\\Bigtable\\Filter\\Builder\\LimitFilter<\/a>"],"description":""}]},{"id":"pass","type":"instance","name":"pass","source":"Bigtable\/src\/Filter.php#L344","description":"<p>Matches all cells, regardless of input. Functionally equivalent to having\nno filter.<\/p>","examples":[{"caption":"","code":"use Google\\Cloud\\Bigtable\\Filter;\n\n$rowFilter = Filter::pass();"}],"resources":[],"params":[],"exceptions":[],"returns":[{"types":["<a data-custom-type=\"bigtable\/filter\/simplefilter\">Google\\Cloud\\Bigtable\\Filter\\SimpleFilter<\/a>"],"description":""}]},{"id":"block","type":"instance","name":"block","source":"Bigtable\/src\/Filter.php#L364","description":"<p>Does not match any cells, regardless of input. Useful for temporarily\ndisabling just part of a filter.<\/p>","examples":[{"caption":"","code":"use Google\\Cloud\\Bigtable\\Filter;\n\n$rowFilter = Filter::block();"}],"resources":[],"params":[],"exceptions":[],"returns":[{"types":["<a data-custom-type=\"bigtable\/filter\/simplefilter\">Google\\Cloud\\Bigtable\\Filter\\SimpleFilter<\/a>"],"description":""}]},{"id":"sink","type":"instance","name":"sink","source":"Bigtable\/src\/Filter.php#L386","description":"<p>Outputs all cells directly to the output of the read rather than to any\nparent filter. For advanced usage,\n<a href=\"https:\/\/github.com\/googleapis\/googleapis\/blob\/master\/google\/bigtable\/v2\/data.proto\">see comments in<\/a>\nfor more detail.<\/p>","examples":[{"caption":"","code":"use Google\\Cloud\\Bigtable\\Filter;\n\n$rowFilter = Filter::sink();"}],"resources":[],"params":[],"exceptions":[],"returns":[{"types":["<a data-custom-type=\"bigtable\/filter\/simplefilter\">Google\\Cloud\\Bigtable\\Filter\\SimpleFilter<\/a>"],"description":""}]},{"id":"label","type":"instance","name":"label","source":"Bigtable\/src\/Filter.php#L416","description":"<p>Applies the given label to all cells in the output row. This allows the\ncaller to determine which results were produced from which part of the\nfilter.<\/p>\n<p>Due to technical limitation, it is not currently possible to apply\nmultiple labels to a cell. As a result, a\n<a data-custom-type=\"bigtable\/filter\/chainfilter\">Google\\Cloud\\Bigtable\\Filter\\ChainFilter<\/a> may have no more than one\nsub-filter which contains a label. It is okay for a\n<a data-custom-type=\"bigtable\/filter\/interleavefilter\">Google\\Cloud\\Bigtable\\Filter\\InterleaveFilter<\/a> to contain multiple\nlabels, as they will be applied to separate copies of the input. This may\nbe relaxed in the future.<\/p>","examples":[{"caption":"","code":"use Google\\Cloud\\Bigtable\\Filter;\n\n$rowFilter = Filter::label('my-label');"}],"resources":[],"params":[{"name":"value","description":"<p>The label to apply.<\/p>","types":["<a href=\"http:\/\/php.net\/manual\/en\/language.types.string.php\" target=\"_blank\">string<\/a>"],"optional":false,"nullable":null}],"exceptions":[],"returns":[{"types":["<a data-custom-type=\"bigtable\/filter\/simplefilter\">Google\\Cloud\\Bigtable\\Filter\\SimpleFilter<\/a>"],"description":""}]}]}