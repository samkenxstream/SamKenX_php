{"id":"kms\/readme","type":"guide","title":"Cloud KMS for PHP","name":"Cloud KMS for PHP","description":"<body>\n\n\n\n\n<h3>Installation<\/h3>\n<p>To begin, install the preferred dependency manager for PHP, <a href=\"https:\/\/getcomposer.org\/\">Composer<\/a>.<\/p>\n<p>Now to install just this component:<\/p>\n<pre><code class=\"language-sh\">$ composer require google\/cloud-kms<\/code><\/pre>\n<p>Or to install the entire suite of components at once:<\/p>\n<pre><code class=\"language-sh\">$ composer require google\/cloud<\/code><\/pre>\n<p>This component supports both REST over HTTP\/1.1 and gRPC. In order to take advantage of the benefits offered by gRPC (such as streaming methods)\nplease see our <a href=\"https:\/\/cloud.google.com\/php\/grpc\">gRPC installation guide<\/a>.<\/p>\n<h3>Authentication<\/h3>\n<p>Please see our <a href=\"https:\/\/github.com\/googleapis\/google-cloud-php\/blob\/main\/AUTHENTICATION.md\">Authentication guide<\/a> for more information\non authenticating your client. Once authenticated, you'll be ready to start making requests.<\/p>\n<h3>Sample<\/h3>\n<pre><code class=\"language-php\">require __DIR__ . '\/vendor\/autoload.php';\n\nuse Google\\ApiCore\\ApiException;\nuse Google\\Cloud\\Kms\\V1\\CryptoKey;\nuse Google\\Cloud\\Kms\\V1\\CryptoKey\\CryptoKeyPurpose;\nuse Google\\Cloud\\Kms\\V1\\KeyManagementServiceClient;\nuse Google\\Cloud\\Kms\\V1\\KeyRing;\n\n$client = new KeyManagementServiceClient();\n\n$projectId = 'example-project';\n$location = 'global';\n\n\/\/ Create a keyring\n$keyRingId = 'example-keyring';\n$locationName = $client::locationName($projectId, $location);\n$keyRingName = $client::keyRingName($projectId, $location, $keyRingId);\n\ntry {\n    $keyRing = $client-&gt;getKeyRing($keyRingName);\n} catch (ApiException $e) {\n    if ($e-&gt;getStatus() === 'NOT_FOUND') {\n        $keyRing = new KeyRing();\n        $keyRing-&gt;setName($keyRingName);\n        $client-&gt;createKeyRing($locationName, $keyRingId, $keyRing);\n    }\n}\n\n\/\/ Create a cryptokey\n$keyId = 'example-key';\n$keyName = $client::cryptoKeyName($projectId, $location, $keyRingId, $keyId);\n\ntry {\n    $cryptoKey = $client-&gt;getCryptoKey($keyName);\n} catch (ApiException $e) {\n    if ($e-&gt;getStatus() === 'NOT_FOUND') {\n        $cryptoKey = new CryptoKey();\n        $cryptoKey-&gt;setPurpose(CryptoKeyPurpose::ENCRYPT_DECRYPT);\n        $cryptoKey = $client-&gt;createCryptoKey($keyRingName, $keyId, $cryptoKey);\n    }\n}\n\n\/\/ Encrypt and decrypt\n$secret = 'My secret text';\n$response = $client-&gt;encrypt($keyName, $secret);\n$cipherText = $response-&gt;getCiphertext();\n\n$response = $client-&gt;decrypt($keyName, $cipherText);\n\n$plainText = $response-&gt;getPlaintext();\n\nassert($secret === $plainText);<\/code><\/pre>\n<h3>Version<\/h3>\n<p>This component is considered GA (generally available). As such, it will not introduce backwards-incompatible changes in\nany minor or patch releases. We will address issues and requests with the highest priority.<\/p>\n<h3>Next Steps<\/h3>\n<ol>\n<li>Understand the <a href=\"https:\/\/cloud.google.com\/kms\/docs\">official documentation<\/a>.<\/li>\n<\/ol><\/body>","methods":[]}